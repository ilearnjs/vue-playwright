name: Playwright Tests
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

permissions:
  contents: read

jobs:
  cache-and-test-master:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 22.18.0

    - name: Cache yarn dependencies
      uses: actions/cache@v4
      id: yarn-cache
      with:
        path: fe/node_modules
        key: yarn-${{ hashFiles('fe/yarn.lock') }}

    - name: Cache Playwright browsers
      uses: actions/cache@v4
      id: playwright-cache
      with:
        path: ~/.cache/ms-playwright
        key: playwright-${{ runner.os }}-${{ hashFiles('fe/yarn.lock') }}

    - name: Install dependencies
      # if: steps.yarn-cache.outputs.cache-hit != 'true'
      working-directory: ./fe
      run: yarn install --frozen-lockfile

    - name: Install Playwright browsers and dependencies
      # if: steps.playwright-cache.outputs.cache-hit != 'true'
      working-directory: ./fe
      run: npx playwright install --with-deps
        # npx playwright install
        # npx playwright install-deps

    - name: Run Playwright tests
      working-directory: ./fe
      run: npx playwright test --reporter=html
      continue-on-error: true

    - name: Generate report path
      id: report-path
      run: |
        REPORT_PATH="main/$(date +%Y%m%d-%H%M%S)"
        echo "path=$REPORT_PATH" >> $GITHUB_OUTPUT
        echo "Report path: $REPORT_PATH"

    # Deploy to S3 if configured (will skip if secrets are not set)
    - name: Configure AWS credentials
      id: aws-creds
      continue-on-error: true
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

    - name: Upload report to S3
      if: steps.aws-creds.outcome == 'success'
      working-directory: ./fe
      run: |
        # Check if bucket name is provided
        if [ -z "${{ secrets.S3_BUCKET_NAME }}" ]; then
          echo "S3_BUCKET_NAME secret not set, skipping S3 upload"
          exit 0
        fi

        aws s3 sync playwright-report/ "s3://${{ secrets.S3_BUCKET_NAME }}/playwright-reports/${{ steps.report-path.outputs.path }}/" \
          --delete \
          --cache-control "public, max-age=3600"

        REPORT_URL="https://${{ secrets.S3_BUCKET_NAME }}.s3.amazonaws.com/playwright-reports/${{ steps.report-path.outputs.path }}/index.html"
        echo "ðŸ“Š Master branch report available at: $REPORT_URL"

    - name: Upload test report artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report-master-${{ github.sha }}
        path: fe/playwright-report/
        retention-days: 30

  test:
    if: github.event_name == 'pull_request'
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
    - name: Checkout PR branch
      uses: actions/checkout@v4

    - name: Checkout master for baseline snapshots
      uses: actions/checkout@v4
      with:
        ref: master
        path: master-baseline

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 22.18.0

    - name: Cache Playwright browsers
      uses: actions/cache@v4
      id: playwright-cache
      with:
        path: ~/.cache/ms-playwright
        key: playwright-${{ runner.os }}-${{ hashFiles('fe/yarn.lock') }}

    - name: Cache yarn dependencies (master baseline)
      uses: actions/cache@v4
      id: yarn-master-baseline-cache
      with:
        path: master-baseline/fe/node_modules
        key: yarn-${{ hashFiles('master-baseline/fe/yarn.lock') }}
        # key: yarn-baseline-${{ hashFiles('master-baseline/fe/yarn.lock') }}

    - name: Install dependencies (master)
      working-directory: master-baseline/fe
      # if: steps.yarn-master-baseline-cache.outputs.cache-hit != 'true'
      run: yarn install --frozen-lockfile

    - name: Install Playwright browsers and dependencies (master)
      working-directory: master-baseline/fe
      # if: steps.playwright-cache.outputs.cache-hit != 'true'
      run: npx playwright install --with-deps
        # npx playwright install
        # npx playwright install-deps

    - name: Generate master snapshots
      working-directory: master-baseline/fe
      run: |
        npx playwright test --update-snapshots

    - name: Copy master snapshots as baseline
      run: |
        mkdir -p fe/.tests/snaps
        cp -r master-baseline/fe/.tests/snaps/* fe/.tests/snaps/ 2>/dev/null || true

    - name: Cache yarn dependencies (PR)
      uses: actions/cache@v4
      id: yarn-pr-cache
      with:
        path: fe/node_modules
        key: yarn-${{ hashFiles('fe/yarn.lock') }}
        restore-keys: |
          yarn-

    - name: Install dependencies
      working-directory: ./fe
      # if: steps.yarn-pr-cache.outputs.cache-hit != 'true'
      run: yarn install --frozen-lockfile

    # - name: Install Playwright browsers and dependencies
    #   working-directory: ./fe
    #   run: playwright install --with-deps

    - name: Run Playwright tests
      working-directory: ./fe
      run: npx playwright test --reporter=html
      continue-on-error: true

    - name: Generate unique report path
      if: always()
      id: report-path
      run: |
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          REPORT_PATH="pr-${{ github.event.pull_request.number }}/$(date +%Y%m%d-%H%M%S)"
        else
          REPORT_PATH="main/$(date +%Y%m%d-%H%M%S)"
        fi
        echo "path=$REPORT_PATH" >> $GITHUB_OUTPUT
        echo "Report path: $REPORT_PATH"

    # Deploy to S3 if credentials are configured (will skip if secrets are not set)
    - name: Configure AWS credentials
      if: always()
      id: aws-creds-pr
      continue-on-error: true
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

    - name: Upload report to S3
      if: always() && steps.aws-creds-pr.outcome == 'success'
      working-directory: ./fe
      run: |
        # Check if bucket name is provided
        if [ -z "${{ secrets.S3_BUCKET_NAME }}" ]; then
          echo "S3_BUCKET_NAME secret not set, skipping S3 upload"
          exit 0
        fi

        aws s3 sync playwright-report/ "s3://${{ secrets.S3_BUCKET_NAME }}/playwright-reports/${{ steps.report-path.outputs.path }}/" \
          --delete \
          --cache-control "public, max-age=3600"

        REPORT_URL="https://${{ secrets.S3_BUCKET_NAME }}.s3.amazonaws.com/playwright-reports/${{ steps.report-path.outputs.path }}/index.html"
        echo "ðŸ“Š S3 Report URL: $REPORT_URL"
        echo "S3_REPORT_URL=$REPORT_URL" >> $GITHUB_ENV

    # Always upload as artifact (fallback if S3 is not configured)
    - name: Upload test report artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report-${{ github.event.pull_request.number || github.sha }}
        path: fe/playwright-report/
        retention-days: 30

    - name: Add report info to summary
      if: always()
      run: |
        echo "## ðŸ“Š Playwright Test Results" >> $GITHUB_STEP_SUMMARY

        # Add S3 link if available
        if [ ! -z "${{ env.S3_REPORT_URL }}" ]; then
          echo "### ðŸ”— [View Report Online](${{ env.S3_REPORT_URL }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi

        echo "### ðŸ“¦ Artifact" >> $GITHUB_STEP_SUMMARY
        echo "Test report has been uploaded as an artifact." >> $GITHUB_STEP_SUMMARY
        echo "Download from the Actions tab to view locally." >> $GITHUB_STEP_SUMMARY